version: 2
jobs:
  # The build job
  build:
    working_directory: ~/project
    docker:
      - image: circleci/node:8.10
    steps:
      # Checkout the code from the branch into the working_directory
      - checkout
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore local dependencies from cache
      - restore_cache:
          keys:
            # when lock file changes, use increasingly general patterns to restore cache
            - npm-cache-v1-{{ .Branch }}-{{ checksum "venue/package-lock.json" }}
            - npm-cache-v1-{{ .Branch }}-
            - npm-cache-v1-
      # - restore_cache:
      #     keys:
      #       - v1-dependencies-{{ checksum "venue/package.json" }}
      #       - v1-dependencies-
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: cd venue && npm install
      # Cache local dependencies if they don't exist
      - save_cache:
          paths:
            - ~/project/venue/node_modules # location depends on npm version
          key: npm-cache-v1-{{ .Branch }}-{{ checksum "venue/package-lock.json" }}
      # - save_cache:
      #     key: v1-dependencies-{{ checksum "venue/package.json" }}
      #     paths:
      #       - venue/node_modules
      # Lint the source code
      - run:
          name: Linting
          command: cd venue && npm run lint
      # Test the source code
      # TODO Get tests to do anything useful
      # - run:
      #     name: Testing
      #     command: cd venue && npm run test
      # Build project with different configuration based on
      # the current branch
      - run:
          name: Building
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                cd venue && npm run build-qa
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                cd venue && npm run build-production
            else
                cd venue && npm run build
            fi
      # Cache the .nuxt/dist folder for the deploy job
      - save_cache:
          key: v1-dist-{{ .Branch }}-{{ .Revision }}
          paths:
            - venue/lang
            - venue/package.json
            - venue/serverless.yml
            - venue/nuxt.config.js
            - venue/handler.js
            - venue/tsconfig.json
            - venue/tslint.json
            - venue/.nuxt/dist
            - venue/static
  # The deploy job
  deploy:
    working_directory: ~/project
    docker:
      - image: circleci/node:8.10
    steps:
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore cache from the build job which contains the
      # dist folder that needs to be deployed
      - restore_cache:
          key: v1-dist-{{ .Branch }}-{{ .Revision }}
      - restore_cache:
          key: npm-cache-v1-{{ .Branch }}-{{ checksum "venue/package-lock.json" }}
      # Install Serverless
      - run:
          name: Install Serverless CLI and dependencies
          command: |
            cd venue && sudo npm install -g serverless && npm install serverless-offline serverless-s3-sync serverless-domain-manager
      # Install Nuxt
      - run:
          name: Install Nuxt
          command: |
            cd venue && sudo npm install -g nuxt
      # Deploy with the script corresponding to the current branch
      - run:
          name: Deploy to Lambda with Serverless
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
                cd venue && npm run sls:deploy-qa
            elif [ "${CIRCLE_BRANCH}" == "master" ]; then
                cd venue && npm run sls:deploy-production
            else
                cd venue && npm run sls:deploy
            fi
workflows:
  version: 2
  # The build and deploy workflow
  build_and_deploy:
    jobs:
      - build
      # The deploy job will only run on the filtered branches and
      # require the build job to be successful before it starts
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
