# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service:
  name: venue-auth # NOTE: update this with your service name
  awsKmsKeyArn: ${ssm:venue-kms-key-arn}

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "=1.32.0"

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-central-1'}

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "cognito-idp:*"
      Resource: "arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/#{VenueUserPool}"

  # you can define service wide environment variables here
  environment:
    USER_POOL_ID:
      Ref: VenueUserPool
    USER_POOL_CLIENT_ID:
      Ref: VenueUserPoolClient

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  migrateVenueUserToCognito:
    handler: migrateVenueUserToCognito.handler
    cors: true
    events:
      - http: POST users/migrate

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    VenueUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        # Note that this needed to be set manually BEFORE pushing to cloud because it cannot be changed;
        # Also, changing it in any way requires recreating the user pool
        AliasAttributes:
          - preferred_username
        UserPoolName: venue-userPool-${self:provider.stage}
        Schema:
          - Name: email
            Required: true
            Mutable: true
          - Name: legacy_id
            AttributeDataType: String
            Required: false
            Mutable: false

        AutoVerifiedAttributes:
          - email

        Policies:
          PasswordPolicy:
            # These policies are very low, but current passwords don't have any minimum, so
            # to migrate passwords over, need to keep these for the moment
            MinimumLength: 6
            RequireLowercase: false
            RequireNumbers: false
            RequireSymbols: false
            RequireUppercase: false
    VenueUserPoolClient:
      # Created provide application access to user pool
      # Depends on UserPool for ID reference
      Type: "AWS::Cognito::UserPoolClient"
      Properties:
        ClientName: venue-userPoolclient-${self:provider.stage}
        # Need to support copyVenueToCognito authFlow
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        UserPoolId:
          Ref: VenueUserPool
      DependsOn: VenueUserPool
  Outputs:
    VenueUserPoolId:
      Value: "#{VenueUserPool}"
    VenueUserPoolClientId:
      Value: "#{VenueUserPoolClient}"
    AWSRegion:
      Value: "#{AWS::Region}"

plugins:
  - serverless-domain-manager
  - serverless-pseudo-parameters
  - serverless-stack-output

custom:
  domains:
    production: api.volentix.io
    staging: staging-api.volentix.io
    dev: dev-api.volentix.io
  customDomain:
    domainName: ${self:custom.domains.${self:provider.stage}}
    basePath: "auth" # This will be prefixed to all routes
    stage: ${self:provider.stage}
    createRoute53Record: false
  output:
    handler: scripts/output.handler # Same syntax as you already know
    file: stack-${self:provider.stage}.json # toml, yaml, yml, and json format is available
